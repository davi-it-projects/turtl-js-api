{"version":3,"file":"turtl-js-api.mjs","sources":["../Module/TurtlResponse.js","../Module/TurtlAPI.js","../Module/TurtlEndpoint.js","../Module/TurtlAPIService.js","../Module/TurtlRequestModel.js"],"sourcesContent":["export class TurtlResponse {\n    constructor(success = false, message = \"\", data = {}) {\n        this.success = success;\n        this.message = message;\n        this.data = data;\n    }\n\n    static fromJson(json) {\n        return new TurtlResponse(\n            json.success ?? false,\n            json.message ?? \"\",\n            json.data ?? {},\n        );\n    }\n\n    static Error(message) {\n        return new TurtlResponse(false, message);\n    }\n\n    static Success(message = \"\", data = {}) {\n        return new TurtlResponse(true, message, data);\n    }\n}\n","import {TurtlResponse} from \"./TurtlResponse.js\";\n\nexport class TurtlAPI {\n    constructor({ host, getAuthToken = null }) {\n        this.host = host;\n        this.getAuthToken = getAuthToken;\n        this.services = new Map();\n    }\n\n    static async sendRequest(method, url, body, requiresAuth, getAuthToken) {\n        return new Promise((resolve) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(method, url);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n            if (requiresAuth) {\n                const token = getAuthToken ? getAuthToken() : null;\n                if (token) {\n                    xhr.setRequestHeader(\"Authorization\", `Bearer ${token}`);\n                } else {\n                    resolve(TurtlResponse.Error(\"Authentication required.\"));\n                    return;\n                }\n            }\n\n            xhr.onload = () => {\n                try {\n                    const json = JSON.parse(xhr.responseText);\n                    resolve(TurtlResponse.fromJson(json));\n                } catch (e) {\n                    resolve(TurtlResponse.Error(\"Invalid response\"));\n                }\n            };\n\n            xhr.onerror = () => resolve(TurtlResponse.Error(\"Network error\"));\n            xhr.send(JSON.stringify(body));\n        });\n    }\n\n    async call(fullName, modelOrData) {\n        let data = this.#getDataFromFullName(fullName);\n        if (data['Failed']) {\n            return data['TurtlResponse'];\n        }\n        let service = data['Service'];\n        let endpoint = data['Endpoint'];\n\n        const isModel = modelOrData && modelOrData._schema && typeof modelOrData._schema === \"object\";\n        return isModel\n            ? await this.#callWithModel(modelOrData, service, endpoint)\n            : await this.#callWithData(modelOrData, service, endpoint);\n    }\n\n    async #callWithData(data, service, endpoint) {\n        let model = service.getModel(endpoint.modelName);\n        if (model && model.create && typeof model.create === \"function\") {\n            let RequestModel = model.create();\n            return await this.#callWithModel(RequestModel, service, endpoint);\n        }\n        return TurtlResponse.Error(\"Invalid data\");\n    }\n\n    async #callWithModel(requestModel, service, endpoint) {\n        if (!requestModel.isValid) {\n            return requestModel.validateResult;\n        }\n\n        return await this.#sendRequest(requestModel, service, endpoint);\n    }\n\n    async #sendRequest(model, service, endpoint) {\n        const url = `${this.host}${service.basePath}${endpoint.path}`;\n        const method = endpoint.method;\n\n        try {\n            return await TurtlAPI.sendRequest(\n                method,\n                url,\n                model.toDataObject(),\n                endpoint.requiresAuth,\n                this.getAuthToken\n            );\n        } catch (error) {\n            return TurtlResponse.Error(\"Request failed\");\n        }\n    }\n\n    addService(name, service) {\n        this.services.set(name, service);\n    }\n\n    getService(name) {\n        return this.services.get(name);\n    }\n\n    #getDataFromFullName(fullName){\n        const [serviceName, endpointName] = fullName.split(\".\");\n        let output = {\n            'Failed':true,\n            'Response':null,\n            'Service':null,\n            'Endpoint':null\n        }\n\n        const service = this.getService(serviceName);\n        if (!service) {\n            output['Response'] = TurtlResponse.Error(`Service '${serviceName}' not found.`);\n            return output;\n        }\n        output['Service'] = service;\n\n        const endpoint = service.getEndpoint(endpointName);\n        if (!endpoint) {\n            output['Response'] = TurtlResponse.Error(`Endpoint '${endpointName}' not found in service '${serviceName}'.`);\n            return output;\n        }\n\n        output['Endpoint'] = endpoint;\n        output['Failed'] = false;\n        return output;\n    }\n\n    createRequest(fullName, data) {\n        try{\n            let InternalData = this.#getDataFromFullName(fullName);\n            if (InternalData['Failed']) {\n                return InternalData['TurtlResponse'];\n            }\n            let service = InternalData['Service'];\n            let endpoint = InternalData['Endpoint'];\n            let model = service.getModel(endpoint.modelName);\n            if (model && model.create && typeof model.create === 'function') {\n                return model.create(data);\n            }\n            throw new Error(`Failed to create request '${fullName}'.`);\n        }\n        catch(error) {\n            throw error;\n        }\n    }\n\n}\n","export class TurtlEndpoint {\n    constructor({ name, path, method = \"POST\", modelName: modelName, requiresAuth = false }) {\n        this.name = name;\n        this.path = path;\n        this.method = method;\n        this.modelName = modelName;\n        this.requiresAuth = requiresAuth;\n    }\n}\n","import { TurtlEndpoint } from \"./TurtlEndpoint.js\";\n\nexport class TurtlAPIService {\n    constructor(name, basePath) {\n        this.name = name;\n        this.basePath = basePath;\n        this.endpoints = new Map();\n        this.Models = new Map();\n    }\n\n    addEndpoint(name, config) {\n        const endpoint = new TurtlEndpoint({ ...config, name });\n        if (this.Models.has(endpoint.modelName) === false) {\n            console.log(this.Models);\n            console.log(endpoint);\n            throw new Error(`Request model ${endpoint.modelName} does not exist`);\n        }\n        this.endpoints.set(name, endpoint);\n    }\n\n    getEndpoint(name) {\n        return this.endpoints.get(name);\n    }\n\n    addModel(name,model) {\n        if (this.Models.has(name)) {\n        throw new Error(`Request model '${name}' already exists`);\n        }\n        this.Models.set(name, model);\n    }\n\n    getModel(name) {\n        return this.Models.get(name);\n    }\n}\n","import { TurtlResponse } from \"./TurtlResponse.js\";\n\nexport class TurtlRequestModel {\n    constructor(data = {}, schema = {}, customValidator = null) {\n        this._schema = schema;\n        this._customValidator = customValidator;\n\n        // Copy data onto the instance\n        Object.assign(this, data);\n\n        // Run validation\n        const result = TurtlRequestModel.validateFields(schema, this);\n        const custom = customValidator ? customValidator(this) : null;\n\n        if (!result.success) {\n            this.validateResult = result;\n            this.isValid = false;\n        } else if (custom && !custom.success) {\n            this.validateResult = custom;\n            this.isValid = false;\n        } else {\n            this.validateResult = TurtlResponse.Success(\"Validation successful\");\n            this.isValid = true;\n        }\n    }\n\n    static validateFields(schema, instance) {\n        for (const key in schema) {\n            const rules = schema[key];\n            const value = instance[key];\n\n            if (rules.required && (value === undefined || value === null || value === \"\")) {\n                return TurtlResponse.Error(`${key} is required.`);\n            }\n\n            if (rules.type === \"email\" && value && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n                return TurtlResponse.Error(`${key} must be a valid email.`);\n            }\n\n            if (rules.type === \"number\" && typeof value !== \"number\") {\n                return TurtlResponse.Error(`${key} must be a number.`);\n            }\n\n            if (rules.type === \"string\" && typeof value !== \"string\") {\n                return TurtlResponse.Error(`${key} must be a string.`);\n            }\n\n            if (rules.validator) {\n                const result = rules.validator(value, instance);\n                if (result instanceof TurtlResponse && !result.success) {\n                    return result;\n                }\n            }\n        }\n\n        return TurtlResponse.Success();\n    }\n\n    toDataObject() {\n        const cleaned = {};\n        for (const key in this) {\n            if (![\"_schema\", \"_customValidator\", \"validateResult\", \"isValid\"].includes(key)) {\n                cleaned[key] = this[key];\n            }\n        }\n        return cleaned;\n    }\n\n    static createFactory(schema, customValidator = null) {\n        return {\n            create(data = {}) {\n                return new TurtlRequestModel(data, schema, customValidator);\n            }\n        };\n    }\n}\n"],"names":[],"mappings":"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"}