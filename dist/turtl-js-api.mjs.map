{"version":3,"file":"turtl-js-api.mjs","sources":["../Module/TurtlResponse.js","../Module/TurtlAPI.js","../Module/TurtlEndpoint.js","../Module/TurtlRequestModel.js","../Module/TurtlAPIService.js"],"sourcesContent":["export class TurtlResponse {\n    constructor(success = false, message = \"\", data = {}) {\n        this.success = success;\n        this.message = message;\n        this.data = data;\n    }\n\n    static fromJson(json) {\n        return new TurtlResponse(\n            json.success ?? false,\n            json.message ?? \"\",\n            json.data ?? {},\n        );\n    }\n\n    static Error(message) {\n        return new TurtlResponse(false, message);\n    }\n\n    static Success(message = \"\", data = {}) {\n        return new TurtlResponse(true, message, data);\n    }\n}\n","import { TurtlResponse } from \"./TurtlResponse.js\";\n\nexport class TurtlAPI {\n    constructor({ host, getAuthToken = null, mock = false }) {\n        this.host = host;\n        this.getAuthToken = getAuthToken;\n        this.services = new Map();\n        this.validationRules = new Map();\n        this.mock = mock;\n\n        // Register built-in validation rules\n        this.registerValidationRule(\"required\", (value, instance, options) => {\n            if (value === undefined || value === null || value === \"\") {\n                return TurtlResponse.Error(\"Field is required.\");\n            }\n            return TurtlResponse.Success();\n        });\n        this.registerValidationRule(\"email\", (value, instance, options) => {\n            if (value && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n                return TurtlResponse.Error(\"Must be a valid email.\");\n            }\n            return TurtlResponse.Success();\n        });\n\n        this.registerValidationRule(\"minLength\", (value, instance, options) => {\n            if (value !== undefined && typeof value === \"string\") {\n                if (value.length < (options.length || 0)) {\n                    return TurtlResponse.Error(`Minimum length is ${options.length}.`);\n                }\n            }\n            return TurtlResponse.Success();\n        });\n        this.registerValidationRule(\"arrayOf\", (value, _instance, options) => {\n            const { type, isTypeClass = false } = options || {};\n            if (!Array.isArray(value)) {\n                return TurtlResponse.Error(\"Value must be an array.\");\n            }\n            if (!type) {\n                return TurtlResponse.Error(\"No type specified for arrayOf rule.\");\n            }\n            for (const item of value) {\n                if (isTypeClass) {\n                    // Check if item is an instance of the specified class\n                    if (!(item instanceof type)) {\n                        return TurtlResponse.Error(`Array item must be an instance of '${type.name}', but got '${typeof item}'.`);\n                    }\n                } else {\n                    // Check if item is of the specified type\n                    if (typeof item !== type) {\n                        return TurtlResponse.Error(`Array item must be of type '${type}', but got '${typeof item}'.`);\n                    }\n                }\n            }\n            return TurtlResponse.Success();\n        });\n        this.registerValidationRule(\"instanceOf\", (value, _instance, options) => {\n            const { type } = options || {};\n            if (!type) {\n                return TurtlResponse.Error(\"No type specified for InstanceOf rule.\");\n            }\n            if (!(value instanceof type)) {\n                return TurtlResponse.Error(`Value must be an instance of '${type.name}', but got '${typeof value}'.`);\n            }\n            return TurtlResponse.Success();\n        });\n        this.registerValidationRule(\"typeOf\", (value, _instance, options) => {\n            const { type } = options || {};\n            if (!type) {\n                return TurtlResponse.Error(\"No type specified for TypeOf rule.\");\n            }\n            if (typeof value !== type) {\n                return TurtlResponse.Error(`Value must be of type '${type}', but got '${typeof value}'.`);\n            }\n            return TurtlResponse.Success();\n        });\n    }\n\n    registerValidationRule(name, fn) {\n        if (name in this.validationRules) {\n            console.warn(`[TurtlAPI] Validation rule '${name}' is already registered. Overwriting.`);\n        }\n\n        this.validationRules.set(name, fn);\n    }\n\n    getValidationRule(name) {\n        return this.validationRules.get(name);\n    }\n\n    listValidationRules() {\n        return Array.from(this.validationRules.keys());\n    }\n\n    static async sendRequest(method, url, body, requiresAuth, getAuthToken) {\n        return new Promise((resolve) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(method, url);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n            if (requiresAuth) {\n                const token = getAuthToken ? getAuthToken() : null;\n                if (token) {\n                    xhr.setRequestHeader(\"Authorization\", `Bearer ${token}`);\n                } else {\n                    resolve(TurtlResponse.Error(\"Authentication required.\"));\n                    return;\n                }\n            }\n\n            xhr.onload = () => {\n                try {\n                    const json = JSON.parse(xhr.responseText);\n                    resolve(TurtlResponse.fromJson(json));\n                } catch (e) {\n                    resolve(TurtlResponse.Error(\"Invalid response\"));\n                }\n            };\n\n            xhr.onerror = () => resolve(TurtlResponse.Error(\"Network error\"));\n            xhr.send(JSON.stringify(body));\n        });\n    }\n\n    async call(fullName, modelOrData, mockResult = true) {\n        const data = this.#getDataFromFullName(fullName);\n        if (data.Failed) {\n            return data.Response;\n        }\n        const service = data.Service;\n        const endpoint = data.Endpoint;\n\n        const isModel = modelOrData && modelOrData._schema && typeof modelOrData._schema === \"object\";\n        return isModel\n            ? await this.#callWithModel(modelOrData, service, endpoint, mockResult)\n            : await this.#callWithData(modelOrData, service, endpoint, mockResult);\n    }\n\n    async #callWithData(data, service, endpoint, mockResult = true) {\n        const modelFactory = service.getModel(endpoint.modelName);\n        if (modelFactory && modelFactory.create && typeof modelFactory.create === \"function\") {\n            const requestModel = modelFactory.create(data, this); // Inject api here\n            return await this.#callWithModel(requestModel, service, endpoint, mockResult);\n        }\n        return TurtlResponse.Error(\"Invalid data\");\n    }\n\n    async #callWithModel(requestModel, service, endpoint, mockResult = true) {\n        if (!requestModel.isValid) {\n            return requestModel.validateResult;\n        }\n        return await this.#sendRequest(requestModel, service, endpoint, mockResult);\n    }\n\n    async #sendRequest(model, service, endpoint, mockResult = true) {\n        if (this.mock) {\n            if (mockResult) {\n                // If endpoint has a mockResponse, use it\n                if (typeof endpoint.mockResponseSuccess === \"function\") {\n                    return await endpoint.mockResponseSuccess(model);\n                }\n                if (endpoint.mockResponseSuccess !== undefined) {\n                    return typeof endpoint.mockResponseSuccess.then === \"function\"\n                        ? await endpoint.mockResponseSuccess\n                        : endpoint.mockResponseSuccess;\n                }\n                // Default mock response\n                return TurtlResponse.Success(\"Mocked response\", {});\n            }\n            else {\n                // If endpoint has a mockResponseFailure, use it\n                if (typeof endpoint.mockResponseFailure === \"function\") {\n                    return await endpoint.mockResponseFailure(model);\n                }\n                if (endpoint.mockResponseFailure !== undefined) {\n                    return typeof endpoint.mockResponseFailure.then === \"function\"\n                        ? await endpoint.mockResponseFailure\n                        : endpoint.mockResponseFailure;\n                }\n                // Default mock failure response\n                return TurtlResponse.Error(\"Mocked failure response\");\n            }\n        }\n\n        const url = `${this.host}${service.basePath}${endpoint.path}`;\n        const method = endpoint.method;\n\n        try {\n            return await TurtlAPI.sendRequest(\n                method,\n                url,\n                model.toDataObject(),\n                endpoint.requiresAuth,\n                this.getAuthToken\n            );\n        } catch (error) {\n            return TurtlResponse.Error(\"Request failed\");\n        }\n    }\n\n    addService(nameOrService, maybeService) {\n        if (maybeService !== undefined) {\n            // Deprecated usage: (name, service)\n            console.warn(\"[TurtlAPI] addService(name, service) is deprecated. Use addService(service) instead.\");\n            this.services.set(nameOrService, maybeService);\n        } else {\n            // New usage: (service)\n            const service = nameOrService;\n            if (!service || !service.name) {\n                throw new Error(\"Service must have a 'name' property.\");\n            }\n            this.services.set(service.name, service);\n        }\n    }\n\n    getService(name) {\n        return this.services.get(name);\n    }\n\n    #getDataFromFullName(fullName) {\n        const [serviceName, endpointName] = fullName.split(\".\");\n        const output = {\n            Failed: true,\n            Response: null,\n            Service: null,\n            Endpoint: null,\n        };\n\n        const service = this.getService(serviceName);\n        if (!service) {\n            output.Response = TurtlResponse.Error(`Service '${serviceName}' not found.`);\n            return output;\n        }\n        output.Service = service;\n\n        const endpoint = service.getEndpoint(endpointName);\n        if (!endpoint) {\n            output.Response = TurtlResponse.Error(`Endpoint '${endpointName}' not found in service '${serviceName}'.`);\n            return output;\n        }\n        output.Endpoint = endpoint;\n        output.Failed = false;\n        return output;\n    }\n\n    createRequest(fullName, data) {\n        try {\n            const internal = this.#getDataFromFullName(fullName);\n            if (internal.Failed) {\n                return internal.Response;\n            }\n            const modelFactory = internal.Service.getModel(internal.Endpoint.modelName);\n            if (modelFactory && modelFactory.create && typeof modelFactory.create === \"function\") {\n                return modelFactory.create(data, this); // Inject api here\n            }\n            throw new Error(`Failed to create request '${fullName}'.`);\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","export class TurtlEndpoint {\n    constructor({ name, path, method = \"POST\", modelName, requiresAuth = false, mockResponseSuccess = null, mockResponseFailure = null }) {\n        this.name = name;\n        this.path = path;\n        this.method = method;\n        this.modelName = modelName;\n        this.requiresAuth = requiresAuth;\n        this.mockResponseSuccess = mockResponseSuccess;\n        this.mockResponseFailure = mockResponseFailure;\n    }\n}\n","import { TurtlResponse } from \"./TurtlResponse.js\";\n\nexport class TurtlRequestModel {\n    constructor(data = {}, schema = {}, customValidator = null, api = null) {\n        this._schema = schema;\n        this._customValidator = customValidator;\n        this._api = api;\n\n        Object.assign(this, data);\n\n        const result = TurtlRequestModel.validateFields(schema, this, api);\n        const custom = customValidator ? customValidator(this) : null;\n\n        if (!result.success) {\n            this.validateResult = result;\n            this.isValid = false;\n        } else if (custom && !custom.success) {\n            this.validateResult = custom;\n            this.isValid = false;\n        } else {\n            this.validateResult = TurtlResponse.Success(\"Validation successful\");\n            this.isValid = true;\n        }\n    }\n\n    static validateFields(schema, instance, api) {\n        for (const key in schema) {\n            const rulesArray = schema[key];\n            const value = instance[key];\n\n            if (!Array.isArray(rulesArray)) {\n                return TurtlResponse.Error(`Schema for field '${key}' must be an array.`);\n            }\n\n            for (const ruleEntry of rulesArray) {\n                const ruleName = ruleEntry.rule;\n                const options = ruleEntry.options || {};\n\n                const validator = api?.getValidationRule(ruleName);\n                if (typeof validator !== \"function\") {\n                    return TurtlResponse.Error(`Validation rule '${ruleName}' not registered.`);\n                }\n\n                const result = validator(value, instance, options);\n                if (result instanceof TurtlResponse && !result.success) {\n                    return result;\n                }\n            }\n        }\n\n        return TurtlResponse.Success();\n    }\n\n    toDataObject() {\n        const cleaned = {};\n        for (const key in this) {\n            if (![\"_schema\", \"_customValidator\", \"_api\", \"validateResult\", \"isValid\"].includes(key)) {\n                cleaned[key] = this[key];\n            }\n        }\n        return cleaned;\n    }\n\n    static createFactory(schema, customValidator = null) {\n        return {\n            create(data = {}, api = null) {\n                return new TurtlRequestModel(data, schema, customValidator, api);\n            }\n        };\n    }\n}\n","import { TurtlEndpoint } from \"./TurtlEndpoint.js\";\nimport { TurtlRequestModel } from \"./TurtlRequestModel.js\";\n\nexport class TurtlAPIService {\n    constructor(name, basePath) {\n        this.name = name;\n        this.basePath = basePath;\n        this.endpoints = new Map();\n        this.Models = new Map();\n\n        // Add default models\n        this.addModel('empty', TurtlRequestModel.createFactory({}));\n    }\n\n    addEndpoint(name, config) {\n        const endpoint = new TurtlEndpoint({ ...config, name });\n        if (!this.Models.has(endpoint.modelName)) {\n            throw new Error(`Request model '${endpoint.modelName}' does not exist`);\n        }\n        this.endpoints.set(name, endpoint);\n    }\n\n    getEndpoint(name) {\n        return this.endpoints.get(name);\n    }\n\n    addModel(name, model) {\n        if (this.Models.has(name)) {\n            throw new Error(`Request model '${name}' already exists`);\n        }\n        this.Models.set(name, model);\n    }\n\n    getModel(name) {\n        return this.Models.get(name);\n    }\n}\n"],"names":[],"mappings":"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"}